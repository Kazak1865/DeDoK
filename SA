function deepClone(obj, hash = new WeakMap()) {
    // Проверка на примитивные типы и null
    if (obj === null || typeof obj !== 'object') {
        return obj;
    }

    // Проверка на циклические ссылки
    if (hash.has(obj)) {
        return hash.get(obj);
    }

    // Обработка различных типов данных
    let clone;
    if (Array.isArray(obj)) {
        clone = [];
    } else if (obj instanceof Date) {
        clone = new Date(obj);
    } else if (obj instanceof Map) {
        clone = new Map();
        obj.forEach((value, key) => {
            clone.set(deepClone(key, hash), deepClone(value, hash));
        });
    } else if (obj instanceof Set) {
        clone = new Set();
        obj.forEach(value => {
            clone.add(deepClone(value, hash));
        });
    } else {
        clone = Object.create(Object.getPrototypeOf(obj));
    }

    // Сохранение ссылки на текущий объект в WeakMap
    hash.set(obj, clone);

    // Копирование свойств объекта
    for (const key in obj) {
        if (obj.hasOwnProperty(key)) {
            clone[key] = deepClone(obj[key], hash);
        }
    }

    // Копирование символов
    const symbols = Object.getOwnPropertySymbols(obj);
    for (const symbol of symbols) {
        clone[symbol] = deepClone(obj[symbol], hash);
    }

    return clone;
}

// Пример использования
const original = {
    name: "John",
    age: 30,
    date: new Date(),
    nested: {
        array: [1, 2, 3],
        map: new Map([[1, 'one'], [2, 'two']]),
    },
    circular: {}
};
original.circular.self = original;

const copy = deepClone(original);
console.log(copy);
